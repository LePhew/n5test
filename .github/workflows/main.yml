# Este workflow despliega los siguientes recursos utilizando terraform
# - ECR Repo
# - ECS cluster
# - ECS Task definition
# - Application Load Balancer, listeners y target group
# - Security Groups
# - Record CNAME en Azure
#
# Luego, construye una nueva imagen en cada push y asigna distintos valores a la variable de ambiente ENVIRONMENT_NAME
# dependiendo del branch donde provenga el push
#
# Esta imagen es luego desplegada en el ECS Cluster anteriormente creado con terraform y al finalizar puede ser
# accedido bajo el nombre n5test.phewtools.com


name: Deploy to Amazon ECS

on:
  push:
    branches: [ "develop", "testing" ]

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: n5-repo           # set this to your Amazon ECR repository name
  ECS_SERVICE: n5-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: n5-ecs-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: "task-definition.json" # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: n5-container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform init
      run: |
        terraform init
      working-directory: ./terraform

    - name: Terraform plan
      run: |
        terraform plan -out plan.tfplan
      env:
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      working-directory: ./terraform

    - name: Terraform apply
      run: |
        terraform apply "plan.tfplan"
      env:
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      working-directory: ./terraform

    - name: Setting terraform outputs
      id: tf_output
      run: |
        OUTPUT=$(terraform output -raw app_url)
        echo "app_url=$OUTPUT" >> $GITHUB_OUTPUT
      working-directory: ./terraform

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ENVIRONMENT_NAME: ${{ github.ref == 'refs/heads/develop' && 'Development' || 'Testing'}}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg ENVIRONMENT_NAME=$ENVIRONMENT_NAME .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition n5-container --query taskDefinition > $ECS_TASK_DEFINITION
      
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
